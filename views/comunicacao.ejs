<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Comunica√ß√£o WhatsApp</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üí¨</text></svg>">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
    <style>
        body {
            background-color: #fcd50d;
        }
        .status-box {
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            background-color: #ffffff;
        }
        .status-connected {
            color: #28a745;
            font-weight: bold;
        }
        .status-disconnected {
            color: #dc3545;
            font-weight: bold;
        }
        .status-other {
            color: #ffc107;
            font-weight: bold;
        }
        .qr-container {
            text-align: center;
            margin: 20px 0;
        }
        .qr-code {
            max-width: 300px;
            margin: 0 auto;
        }
        .log-container {
            height: 300px;
            overflow-y: auto;
            background-color: #ffffff;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            margin-top: 20px;
        }
        .btn-voltar, .btn-planilha {
            position: fixed;
            top: 20px;
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            text-decoration: none;
            transition: 0.3s;
            display: flex;
            align-items: center;
            gap: 8px;
            z-index: 1000;
        }
        .btn-voltar {
            left: 20px;
        }
        .btn-planilha {
            right: 20px;
            background-color: #1b5e20;
        }
        .btn-voltar:hover, .btn-planilha:hover {
            background-color: #0a280e;
            color: white;
        }
        .btn-primary, .btn-warning {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin: 0 5px;
        }
        .btn-primary {
            background-color: #08426a;
            border: none;
        }
        .btn-primary:hover {
            background-color: #062b4d;
        }
        .btn-warning {
            background-color: #28a745;
            border: none;
        }
        .btn-warning:hover {
            background-color: #218838;
        }
        .container {
            background: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-top: 80px;
            position: relative;
            z-index: 1;
        }
        h1 {
            color: #08426a;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        h1 i {
            font-size: 1.2em;
        }
        h4 {
            color: #08426a;
        }
        .cmd-container {
            background-color: #08426a;
            color: #fff;
            padding: 20px;
            height: 300px;
            overflow-y: auto;
            border-radius: 8px;
            font-family: monospace;
            border: 1px solid #ccc;
            display: block;
        }
    </style>
</head>
<body>
    <a href="/" class="btn btn-secondary btn-voltar">
        <i class="fas fa-arrow-left"></i> Voltar
    </a>
    <a href="#" id="planilhaBtn" class="btn btn-secondary btn-planilha" target="_blank">
        <i class="fas fa-table"></i> Acessar Planilha
    </a>
    
    <div class="container mt-5">
        <h1 class="text-center mb-4">
            Comunica√ß√£o WhatsApp
        </h1>
        
        <div class="row">
            <div class="col-md-8 mx-auto">
                <div class="status-box">
                    <h4>Status da Conex√£o</h4>
                    <p id="status" class="status-other">Aguardando conex√£o...</p>
                </div>

                <div class="qr-container" id="qrContainer" style="display: none;">
                    <h4>Escaneie o QR Code</h4>
                    <img id="qrCode" class="qr-code" src="" alt="QR Code">
                </div>

                <div class="text-center mb-4">
                    <button id="connectBtn" class="btn btn-primary">
                        <i class="fas fa-plug"></i> Conectar
                    </button>
                    <button id="resendBtn" class="btn btn-warning" style="display: none;">
                        <i class="fas fa-redo"></i> Reenviar Mensagens
                    </button>
                </div>

                <div class="log-container cmd-container">
                    <h5>Log de Atividades</h5>
                    <div id="log"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        const statusElement = document.getElementById('status');
        const qrContainer = document.getElementById('qrContainer');
        const qrCode = document.getElementById('qrCode');
        const connectBtn = document.getElementById('connectBtn');
        const resendBtn = document.getElementById('resendBtn');
        const logElement = document.getElementById('log');
        const planilhaBtn = document.getElementById('planilhaBtn');

        // Solicitar o ID da planilha ao carregar a p√°gina
        socket.emit('getPlanilhaId');

        // Receber o ID da planilha e atualizar o link
        socket.on('planilhaId', (planilhaId) => {
            if (planilhaId) {
                planilhaBtn.href = `https://docs.google.com/spreadsheets/d/${planilhaId}`;
            } else {
                planilhaBtn.style.display = 'none';
                addLog('ID da planilha n√£o encontrado nas configura√ß√µes');
            }
        });

        function updateStatus(status) {
            statusElement.textContent = status;
            statusElement.className = '';
            
            if (status === 'Conectado') {
                statusElement.classList.add('status-connected');
                qrContainer.style.display = 'none';
                resendBtn.style.display = 'inline-block';
            } else if (status === 'Desconectado') {
                statusElement.classList.add('status-disconnected');
                qrContainer.style.display = 'none';
                resendBtn.style.display = 'none';
            } else {
                statusElement.classList.add('status-other');
            }
        }

        function scrollToBottom() {
            const container = document.querySelector('.log-container');
            container.scrollTop = container.scrollHeight;
            setTimeout(() => {
                container.scrollTop = container.scrollHeight;
            }, 100);
        }

        function addLog(message) {
            const time = new Date().toLocaleTimeString();
            const newMessage = document.createElement('div');
            newMessage.textContent = `[${time}] ${message}`;
            logElement.appendChild(newMessage);
            scrollToBottom();
        }

        socket.on('connect', () => {
            addLog('Conectado ao servidor');
            connectBtn.disabled = false;
        });

        socket.on('disconnect', () => {
            addLog('Desconectado do servidor');
            connectBtn.disabled = false;
            updateStatus('Desconectado');
        });

        socket.on('status', (status) => {
            updateStatus(status);
            addLog(`Status: ${status}`);
        });

        socket.on('ready', (qrPath) => {
            qrContainer.style.display = 'block';
            qrCode.src = qrPath;
            addLog('QR Code gerado');
        });

        socket.on('error', (error) => {
            addLog(`Erro: ${error}`);
        });

        socket.on('log', (message) => {
            addLog(message);
        });

        connectBtn.addEventListener('click', () => {
            addLog('Iniciando conex√£o...');
            socket.emit('connection');
            connectBtn.disabled = true;
        });

        resendBtn.addEventListener('click', () => {
            addLog('Iniciando reenvio de mensagens...');
            socket.emit('resend');
        });

        socket.emit('checkConnection');
    </script>
</body>
</html> 